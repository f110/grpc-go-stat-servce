// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stat.proto

/*
Package statservice is a generated protocol buffer package.

It is generated from these files:
	stat.proto

It has these top-level messages:
	GetRequest
	GetResponse
	RuntimeStat
*/
package statservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRequest struct {
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetResponse struct {
	Time         string               `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	GoVersion    string               `protobuf:"bytes,2,opt,name=go_version,json=goVersion" json:"go_version,omitempty"`
	GoOs         string               `protobuf:"bytes,3,opt,name=go_os,json=goOs" json:"go_os,omitempty"`
	GoArch       string               `protobuf:"bytes,4,opt,name=go_arch,json=goArch" json:"go_arch,omitempty"`
	CpuNum       int32                `protobuf:"varint,5,opt,name=cpu_num,json=cpuNum" json:"cpu_num,omitempty"`
	GoMaxProcs   int32                `protobuf:"varint,6,opt,name=go_max_procs,json=goMaxProcs" json:"go_max_procs,omitempty"`
	RuntimeStat  *RuntimeStat         `protobuf:"bytes,7,opt,name=runtime_stat,json=runtimeStat" json:"runtime_stat,omitempty"`
	InternalStat *google_protobuf.Any `protobuf:"bytes,8,opt,name=internal_stat,json=internalStat" json:"internal_stat,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *GetResponse) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *GetResponse) GetGoOs() string {
	if m != nil {
		return m.GoOs
	}
	return ""
}

func (m *GetResponse) GetGoArch() string {
	if m != nil {
		return m.GoArch
	}
	return ""
}

func (m *GetResponse) GetCpuNum() int32 {
	if m != nil {
		return m.CpuNum
	}
	return 0
}

func (m *GetResponse) GetGoMaxProcs() int32 {
	if m != nil {
		return m.GoMaxProcs
	}
	return 0
}

func (m *GetResponse) GetRuntimeStat() *RuntimeStat {
	if m != nil {
		return m.RuntimeStat
	}
	return nil
}

func (m *GetResponse) GetInternalStat() *google_protobuf.Any {
	if m != nil {
		return m.InternalStat
	}
	return nil
}

type RuntimeStat struct {
	Time             string    `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	GoroutineNum     int32     `protobuf:"varint,2,opt,name=goroutine_num,json=goroutineNum" json:"goroutine_num,omitempty"`
	CgoCallNum       int32     `protobuf:"varint,3,opt,name=cgo_call_num,json=cgoCallNum" json:"cgo_call_num,omitempty"`
	MemoryAlloc      uint64    `protobuf:"varint,4,opt,name=memory_alloc,json=memoryAlloc" json:"memory_alloc,omitempty"`
	MemoryTotalAlloc uint64    `protobuf:"varint,5,opt,name=memory_total_alloc,json=memoryTotalAlloc" json:"memory_total_alloc,omitempty"`
	MemorySys        uint64    `protobuf:"varint,6,opt,name=memory_sys,json=memorySys" json:"memory_sys,omitempty"`
	MemoryLookups    uint64    `protobuf:"varint,7,opt,name=memory_lookups,json=memoryLookups" json:"memory_lookups,omitempty"`
	MemoryMallocs    uint64    `protobuf:"varint,8,opt,name=memory_mallocs,json=memoryMallocs" json:"memory_mallocs,omitempty"`
	MemoryFrees      uint64    `protobuf:"varint,9,opt,name=memory_frees,json=memoryFrees" json:"memory_frees,omitempty"`
	StackInUse       uint64    `protobuf:"varint,10,opt,name=stack_in_use,json=stackInUse" json:"stack_in_use,omitempty"`
	HeapAlloc        uint64    `protobuf:"varint,11,opt,name=heap_alloc,json=heapAlloc" json:"heap_alloc,omitempty"`
	HeapSys          uint64    `protobuf:"varint,12,opt,name=heap_sys,json=heapSys" json:"heap_sys,omitempty"`
	HeapIdle         uint64    `protobuf:"varint,13,opt,name=heap_idle,json=heapIdle" json:"heap_idle,omitempty"`
	HeapInUse        uint64    `protobuf:"varint,14,opt,name=heap_in_use,json=heapInUse" json:"heap_in_use,omitempty"`
	HeapReleased     uint64    `protobuf:"varint,15,opt,name=heap_released,json=heapReleased" json:"heap_released,omitempty"`
	HeapObjects      uint64    `protobuf:"varint,16,opt,name=heap_objects,json=heapObjects" json:"heap_objects,omitempty"`
	GcNext           uint64    `protobuf:"varint,17,opt,name=gc_next,json=gcNext" json:"gc_next,omitempty"`
	GcLast           uint64    `protobuf:"varint,18,opt,name=gc_last,json=gcLast" json:"gc_last,omitempty"`
	GcNum            uint32    `protobuf:"varint,19,opt,name=gc_num,json=gcNum" json:"gc_num,omitempty"`
	GcPerSecond      float64   `protobuf:"fixed64,20,opt,name=gc_per_second,json=gcPerSecond" json:"gc_per_second,omitempty"`
	GcPausePerSecond float64   `protobuf:"fixed64,21,opt,name=gc_pause_per_second,json=gcPausePerSecond" json:"gc_pause_per_second,omitempty"`
	GcPause          []float64 `protobuf:"fixed64,22,rep,packed,name=gc_pause,json=gcPause" json:"gc_pause,omitempty"`
}

func (m *RuntimeStat) Reset()                    { *m = RuntimeStat{} }
func (m *RuntimeStat) String() string            { return proto.CompactTextString(m) }
func (*RuntimeStat) ProtoMessage()               {}
func (*RuntimeStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RuntimeStat) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *RuntimeStat) GetGoroutineNum() int32 {
	if m != nil {
		return m.GoroutineNum
	}
	return 0
}

func (m *RuntimeStat) GetCgoCallNum() int32 {
	if m != nil {
		return m.CgoCallNum
	}
	return 0
}

func (m *RuntimeStat) GetMemoryAlloc() uint64 {
	if m != nil {
		return m.MemoryAlloc
	}
	return 0
}

func (m *RuntimeStat) GetMemoryTotalAlloc() uint64 {
	if m != nil {
		return m.MemoryTotalAlloc
	}
	return 0
}

func (m *RuntimeStat) GetMemorySys() uint64 {
	if m != nil {
		return m.MemorySys
	}
	return 0
}

func (m *RuntimeStat) GetMemoryLookups() uint64 {
	if m != nil {
		return m.MemoryLookups
	}
	return 0
}

func (m *RuntimeStat) GetMemoryMallocs() uint64 {
	if m != nil {
		return m.MemoryMallocs
	}
	return 0
}

func (m *RuntimeStat) GetMemoryFrees() uint64 {
	if m != nil {
		return m.MemoryFrees
	}
	return 0
}

func (m *RuntimeStat) GetStackInUse() uint64 {
	if m != nil {
		return m.StackInUse
	}
	return 0
}

func (m *RuntimeStat) GetHeapAlloc() uint64 {
	if m != nil {
		return m.HeapAlloc
	}
	return 0
}

func (m *RuntimeStat) GetHeapSys() uint64 {
	if m != nil {
		return m.HeapSys
	}
	return 0
}

func (m *RuntimeStat) GetHeapIdle() uint64 {
	if m != nil {
		return m.HeapIdle
	}
	return 0
}

func (m *RuntimeStat) GetHeapInUse() uint64 {
	if m != nil {
		return m.HeapInUse
	}
	return 0
}

func (m *RuntimeStat) GetHeapReleased() uint64 {
	if m != nil {
		return m.HeapReleased
	}
	return 0
}

func (m *RuntimeStat) GetHeapObjects() uint64 {
	if m != nil {
		return m.HeapObjects
	}
	return 0
}

func (m *RuntimeStat) GetGcNext() uint64 {
	if m != nil {
		return m.GcNext
	}
	return 0
}

func (m *RuntimeStat) GetGcLast() uint64 {
	if m != nil {
		return m.GcLast
	}
	return 0
}

func (m *RuntimeStat) GetGcNum() uint32 {
	if m != nil {
		return m.GcNum
	}
	return 0
}

func (m *RuntimeStat) GetGcPerSecond() float64 {
	if m != nil {
		return m.GcPerSecond
	}
	return 0
}

func (m *RuntimeStat) GetGcPausePerSecond() float64 {
	if m != nil {
		return m.GcPausePerSecond
	}
	return 0
}

func (m *RuntimeStat) GetGcPause() []float64 {
	if m != nil {
		return m.GcPause
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "statservice.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "statservice.GetResponse")
	proto.RegisterType((*RuntimeStat)(nil), "statservice.RuntimeStat")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Stat service

type StatClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type statClient struct {
	cc *grpc.ClientConn
}

func NewStatClient(cc *grpc.ClientConn) StatClient {
	return &statClient{cc}
}

func (c *statClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/statservice.Stat/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stat service

type StatServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

func RegisterStatServer(s *grpc.Server, srv StatServer) {
	s.RegisterService(&_Stat_serviceDesc, srv)
}

func _Stat_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statservice.Stat/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statservice.Stat",
	HandlerType: (*StatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Stat_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stat.proto",
}

func init() { proto.RegisterFile("stat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x5d, 0x6f, 0xd3, 0x3e,
	0x14, 0xc6, 0x95, 0xf5, 0x6d, 0x3d, 0x49, 0xf7, 0xdf, 0xdf, 0xdb, 0x98, 0x37, 0x34, 0x54, 0x3a,
	0x21, 0xf5, 0x02, 0x3a, 0x69, 0xdc, 0x80, 0xb8, 0x61, 0x42, 0x62, 0x9a, 0xb4, 0x37, 0x65, 0xc0,
	0xad, 0xe5, 0xb9, 0x9e, 0x17, 0x96, 0xc4, 0xc1, 0x76, 0xa6, 0xf6, 0xe3, 0xf0, 0xd1, 0xf8, 0x26,
	0xc8, 0xc7, 0xe9, 0x5a, 0x04, 0x77, 0xf1, 0xf3, 0xfc, 0x4e, 0x7c, 0x9e, 0xa3, 0x93, 0x00, 0x58,
	0xc7, 0xdd, 0xa4, 0x32, 0xda, 0x69, 0x12, 0xfb, 0x67, 0x2b, 0xcd, 0x63, 0x26, 0xe4, 0xfe, 0x9e,
	0xd2, 0x5a, 0xe5, 0xf2, 0x08, 0xad, 0xdb, 0xfa, 0xee, 0x88, 0x97, 0xf3, 0xc0, 0x8d, 0x12, 0x80,
	0x53, 0xe9, 0x52, 0xf9, 0xa3, 0x96, 0xd6, 0x8d, 0x7e, 0xae, 0x41, 0x8c, 0x47, 0x5b, 0xe9, 0xd2,
	0x4a, 0x42, 0xa0, 0xed, 0xb2, 0x42, 0xd2, 0x68, 0x18, 0x8d, 0xfb, 0x29, 0x3e, 0x93, 0x03, 0x00,
	0xa5, 0xd9, 0xa3, 0x34, 0x36, 0xd3, 0x25, 0x5d, 0x43, 0xa7, 0xaf, 0xf4, 0xb7, 0x20, 0x90, 0x2d,
	0xe8, 0x28, 0xcd, 0xb4, 0xa5, 0xad, 0x50, 0xa3, 0xf4, 0x95, 0x25, 0xbb, 0xd0, 0x53, 0x9a, 0x71,
	0x23, 0xee, 0x69, 0x1b, 0xe5, 0xae, 0xd2, 0x27, 0x46, 0xdc, 0x7b, 0x43, 0x54, 0x35, 0x2b, 0xeb,
	0x82, 0x76, 0x86, 0xd1, 0xb8, 0x93, 0x76, 0x45, 0x55, 0x5f, 0xd6, 0x05, 0x19, 0x42, 0xa2, 0x34,
	0x2b, 0xf8, 0x8c, 0x55, 0x46, 0x0b, 0x4b, 0xbb, 0xe8, 0x82, 0xd2, 0x17, 0x7c, 0x76, 0xed, 0x15,
	0xf2, 0x01, 0x12, 0x53, 0x97, 0xbe, 0x25, 0xe6, 0xb3, 0xd2, 0xde, 0x30, 0x1a, 0xc7, 0xc7, 0x74,
	0xb2, 0x12, 0x7c, 0x92, 0x06, 0xe0, 0xc6, 0x71, 0x97, 0xc6, 0x66, 0x79, 0x20, 0xef, 0x61, 0x90,
	0x95, 0x4e, 0x9a, 0x92, 0xe7, 0xa1, 0x7a, 0x1d, 0xab, 0xb7, 0x27, 0x61, 0x52, 0x93, 0xc5, 0xa4,
	0x26, 0x27, 0xe5, 0x3c, 0x4d, 0x16, 0xa8, 0x2f, 0x1d, 0xfd, 0xea, 0x40, 0xbc, 0xf2, 0xde, 0x7f,
	0xce, 0xe8, 0x10, 0x06, 0x4a, 0x1b, 0x5d, 0xbb, 0xac, 0x94, 0x18, 0x6e, 0x0d, 0xdb, 0x4f, 0x9e,
	0xc4, 0x26, 0xa2, 0x50, 0x9a, 0x09, 0x9e, 0xe7, 0xc8, 0xb4, 0x42, 0x44, 0xa1, 0xf4, 0x27, 0x9e,
	0xe7, 0x9e, 0x78, 0x09, 0x49, 0x21, 0x0b, 0x6d, 0xe6, 0x8c, 0xe7, 0xb9, 0x16, 0x38, 0xbb, 0x76,
	0x1a, 0x07, 0xed, 0xc4, 0x4b, 0xe4, 0x35, 0x90, 0x06, 0x71, 0xda, 0xf1, 0xbc, 0x01, 0x3b, 0x08,
	0x6e, 0x06, 0xe7, 0x8b, 0x37, 0x02, 0x7d, 0x00, 0xd0, 0xd0, 0x76, 0x1e, 0x66, 0xda, 0x4e, 0xfb,
	0x41, 0xb9, 0x99, 0x5b, 0xf2, 0x0a, 0x36, 0x1a, 0x3b, 0xd7, 0xfa, 0xa1, 0xae, 0x2c, 0x0e, 0xb5,
	0x9d, 0x0e, 0x82, 0x7a, 0x1e, 0xc4, 0x15, 0xac, 0xc0, 0xeb, 0x2c, 0x4e, 0xef, 0x09, 0xbb, 0x08,
	0xe2, 0x4a, 0xf7, 0x77, 0x46, 0x4a, 0x4b, 0xfb, 0xab, 0xdd, 0x7f, 0xf6, 0x92, 0x1f, 0x81, 0x75,
	0x5c, 0x3c, 0xb0, 0xac, 0x64, 0xb5, 0x95, 0x14, 0x10, 0x01, 0xd4, 0xce, 0xca, 0xaf, 0x16, 0xb7,
	0xed, 0x5e, 0xf2, 0xaa, 0xc9, 0x15, 0x87, 0x8e, 0xbd, 0x12, 0x02, 0xed, 0xc1, 0x3a, 0xda, 0x3e,
	0x4e, 0x82, 0x66, 0xcf, 0x9f, 0x7d, 0x98, 0xe7, 0x80, 0x1c, 0xcb, 0xa6, 0xb9, 0xa4, 0x03, 0xf4,
	0x90, 0x3d, 0x9b, 0xe6, 0x92, 0xbc, 0x80, 0x38, 0x98, 0xe1, 0xde, 0x8d, 0xe5, 0x7b, 0xc3, 0xb5,
	0x87, 0x30, 0x40, 0xdf, 0xc8, 0x5c, 0x72, 0x2b, 0xa7, 0xf4, 0x3f, 0x24, 0x12, 0x2f, 0xa6, 0x8d,
	0xe6, 0x03, 0x22, 0xa4, 0x6f, 0xbf, 0x4b, 0xe1, 0x2c, 0xdd, 0x0c, 0x01, 0xbd, 0x76, 0x15, 0x24,
	0x5c, 0x7c, 0xc1, 0x4a, 0x39, 0x73, 0xf4, 0x7f, 0x74, 0xbb, 0x4a, 0x5c, 0xca, 0x99, 0x6b, 0x8c,
	0x9c, 0x5b, 0x47, 0xc9, 0xc2, 0x38, 0xe7, 0xd6, 0x91, 0x1d, 0xe8, 0xfa, 0x8a, 0xba, 0xa0, 0x5b,
	0xc3, 0x68, 0x3c, 0x48, 0x3b, 0x4a, 0xf8, 0x55, 0x18, 0xc1, 0x40, 0x09, 0x56, 0x49, 0xc3, 0xac,
	0x14, 0xba, 0x9c, 0xd2, 0xed, 0x61, 0x34, 0x8e, 0xd2, 0x58, 0x89, 0x6b, 0x69, 0x6e, 0x50, 0x22,
	0x6f, 0x60, 0xcb, 0x33, 0xbc, 0xb6, 0x72, 0x95, 0xdc, 0x41, 0x72, 0x53, 0x89, 0x6b, 0xef, 0x2c,
	0xf1, 0x3d, 0x58, 0x5f, 0xe0, 0xf4, 0xd9, 0xb0, 0x35, 0x8e, 0xd2, 0x5e, 0xc3, 0x1c, 0x7f, 0x84,
	0x36, 0xee, 0xf6, 0x3b, 0x68, 0x9d, 0x4a, 0x47, 0x76, 0xff, 0xf8, 0xa8, 0x96, 0xff, 0x8b, 0x7d,
	0xfa, 0xb7, 0x11, 0xfe, 0x1c, 0xb7, 0x5d, 0xfc, 0x82, 0xde, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x70, 0x2c, 0xdc, 0xc7, 0x94, 0x04, 0x00, 0x00,
}
